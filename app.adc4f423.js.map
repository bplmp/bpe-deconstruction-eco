{"version":3,"sources":["webpack:///./src/map.js","webpack:///./src/data.js","webpack:///./src/table.js","webpack:///./src/index.js"],"names":["INITIAL_COORDS","roleColors","init","data","geoJSON","featureCollection","i","length","feature","replace","lon","lat","match","parseDMS","isNaN","parseFloat","built","buildFeature","push","e","console","log","buildGeoJSON","features","map","L","center","zoom","scrollWheelZoom","maxZoom","attribution","id","addTo","pointToLayer","latlng","radius","fillColor","properties","color","weight","opacity","fillOpacity","onEachFeature","layer","prop","bindPopup","loadMap","setTimeout","document","getElementById","style","display","featureObject","variable","hasOwnProperty","trim","geometry","coordinates","input","parts","split","degrees","minutes","seconds","direction","dd","parseInt","convertDMSToDD","getSpreadsheetData","Papa","download","header","complete","results","Map","elementId","$","DataTable","responsive","scrollY","scrollCollapse","paging","columns","title","render","type","full","meta","Table","querySelector","innerHTML","window","addEventListener","Data","colors","colorsHTML","join"],"mappings":"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","file":"app.adc4f423.js","sourcesContent":["import * as L from 'leaflet'\n\nconst MAPBOX_LINK = 'https://api.mapbox.com/styles/v1/bernardosp/ck3r9ne5k21bj1dpdgl67vzyu/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiYmVybmFyZG9zcCIsImEiOiJjamkyMmhqdjAwZ284M2txcHpqYjUwam91In0.RiploEl5Mm6bjXhPZbN6XQ'\nconst LAT_COL = 'LAT'\nconst LON_COL = 'LON'\nconst INITIAL_COORDS = [37.76496739271615, -122.39985495803376]\nconst INITIAL_ZOOM = 8\n\nconst roleColors = {\n  'Architectural / Consulting Firm': '#ff7f0e',\n  'Deconstruction': '#2ca02c',\n  'Government / Public Agency': '#aec7e8',\n  'Reuse': '#9467bd',\n  'Waste Management & Recycling': '#bcbd22',\n}\n\nexport {\n  init,\n  roleColors,\n  mapLegend,\n}\n\nfunction init(data) {\n  const geoJSON = buildGeoJSON(data)\n  console.log(data)\n  console.log(geoJSON)\n  console.log(data.length, 'rows received')\n  console.log(geoJSON.features.length, 'rows parsed')\n  loadMap(geoJSON)\n  setTimeout(function(){\n    document.getElementById('spinner').style.display = 'none'\n  }, 350)\n}\n\nfunction buildFeature(feature) {\n  let featureObject = {\n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": []\n    }\n  }\n  for (let variable in feature) {\n    if (feature.hasOwnProperty(variable)) {\n      featureObject.properties[variable.trim()] = feature[variable].trim()\n    }\n  }\n  featureObject.geometry.coordinates.push(parseFloat(feature[LON_COL]))\n  featureObject.geometry.coordinates.push(parseFloat(feature[LAT_COL]))\n  return featureObject\n}\n\nfunction buildGeoJSON(data) {\n  let featureCollection = {\n    \"type\": \"FeatureCollection\",\n    \"features\": []\n  }\n  for (var i = 0; i < data.length; i++) {\n    let feature = data[i]\n    feature[LON_COL] = feature[LON_COL].replace(',', '.')\n    feature[LAT_COL] = feature[LAT_COL].replace(',', '.')\n    let lon = feature[LON_COL]\n    let lat = feature[LAT_COL]\n    if (lon.match(/[a-z]/i) && lat.match(/[a-z]/i)) {\n      feature[LON_COL] = parseDMS(feature[LON_COL])\n      feature[LAT_COL] = parseDMS(feature[LAT_COL])\n    }\n    try {\n      if (isNaN(parseFloat(lon)) == false && isNaN(parseFloat(lat)) == false) {\n        let built = buildFeature(feature)\n        featureCollection['features'].push(built)\n      }\n    } catch (e) {\n        console.log('error parsing row', i, e)\n    }\n  }\n  return featureCollection\n}\n\nfunction loadMap(geoJSON) {\n  const map = L.map('map', {\n    center: INITIAL_COORDS,\n    zoom: INITIAL_ZOOM,\n    scrollWheelZoom: false\n  })\n\n  L.tileLayer(MAPBOX_LINK, {\n    maxZoom: 18,\n    attribution: 'Map data &copy <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n      'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    id: 'mapbox.light'\n  }).addTo(map)\n\n  function popup(feature, layer) {\n    let prop = feature.properties\n\n    layer.bindPopup(`\n      <div class=\"popup\">\n        <h2>${prop['ENTITY']}</h2>\n        ${prop['LOCATION NAME'] ? `<h4>${prop['LOCATION NAME']}</h4>` : ''}\n        <hr/>\n        <table class=\"popup-table\">\n          <tbody>\n            <tr><td><strong>Role(s)</strong></td><td>${prop['ROLE(S)']}</td></tr>\n            <tr><td><strong>Address</strong></td><td>${prop['FULL ADDRESS']}</td></tr>\n            <tr><td><strong>Contact</strong></td><td>${prop['CONTACT']}</td></tr>\n            <tr><td><strong>Email</strong></td><td>${prop['EMAIL']}</td></tr>\n            <tr><td><strong>Phone</strong></td><td>${prop['PHONE']}</td></tr>\n            <tr><td><strong>Website</strong></td><td><a href=\"${prop['WEBSITE']}\" target=\"_blank\">${prop['WEBSITE']}</a></td></tr>\n          </tbody>\n        </table>\n      </div>\n      `)\n  }\n\n  const pointsLayers = L.geoJSON(geoJSON, {\n    pointToLayer: function(feature, latlng) {\n      console.log(feature);\n      return L.circleMarker(latlng, {\n        radius: 9,\n        fillColor: roleColors[feature.properties['GENERAL ROLE']],\n        color: \"#fff\",\n        weight: 1,\n        opacity: 1,\n        fillOpacity: 0.9,\n      })\n    },\n    onEachFeature: popup\n  }).addTo(map)\n\n}\n\n// https://stackoverflow.com/questions/1140189/converting-latitude-and-longitude-to-decimal-values\nfunction parseDMS(input) {\n    let parts = input.split(/[^\\d\\w\\.]+/)\n    return convertDMSToDD(parts[0], parts[1], parts[2], parts[3])\n}\n\nfunction convertDMSToDD(degrees, minutes, seconds, direction) {\n    let dd = parseInt(degrees) + parseInt(minutes)/60 + parseInt(seconds)/(60*60)\n\n    if (direction == \"S\" || direction == \"W\") {\n        dd = dd * -1\n    }\n    return dd\n}\n\nfunction mapLegend(colors) {\n  const colorsHTML = []\n  for (let variable in colors) {\n    if (colors.hasOwnProperty(variable)) {\n      colorsHTML.push(`\n        <div class=\"map-legend-row flex\">\n          <div class=\"map-legend-color\" style=\"background: ${colors[variable]}\"></div>\n          <span>${variable}</span>\n        </div>\n      `)\n    }\n  }\n  return `<div class=\"map-legend flex flex-column\">${colorsHTML.join('\\n')}</div>`\n}\n","import * as Papa from 'papaparse'\nimport * as Map from './map.js'\nimport * as Table from './table.js'\n\nconst publicSpreadsheetUrl = 'https://docs.google.com/spreadsheets/d/19ss6dmhb2B9qFWZQVODeYFJzMBCvyd5fPy8bjkA3CB8/pub?gid=1619676924&output=csv'\n\nexport {\n  getSpreadsheetData\n}\n\nfunction getSpreadsheetData() {\n  Papa.parse(publicSpreadsheetUrl, {\n  download: true,\n  header: true,\n  complete: function(results) {\n      const data = results.data\n      Map.init(data)\n      Table.init(data, '#table')\n    }\n  })\n}\n","// var $ = require( 'jquery' )\n// var dt = require( 'datatables.net' )( window, $ )\nimport * as $ from 'jquery'\nimport * as dt from 'datatables.net'\nimport * as dtResponsive from 'datatables.net-responsive'\n\nexport {\n  init\n}\n\nfunction init(data, elementId) {\n  $(elementId).DataTable({\n    data: data,\n    responsive: true,\n    scrollY: '800px',\n    scrollCollapse: true,\n    paging: true,\n    columns: [{\n        data: 'ENTITY',\n        title: 'ENTITY',\n      },\n      {\n        data: 'ROLE(S)',\n        title: 'ROLE(S)',\n      },\n      {\n        data: 'FULL ADDRESS',\n        title: 'FULL ADDRESS',\n      },\n      {\n        data: 'CONTACT',\n        title: 'CONTACT',\n      },\n      {\n        data: 'EMAIL',\n        title: 'EMAIL',\n        render: function(data, type, full, meta) {\n          return `<a href=\"mailto:${data}\">${data}</a>`\n        }\n      },\n      {\n        data: 'PHONE',\n        title: 'PHONE',\n        render: function(data, type, full, meta) {\n          return `<a href=\"tel:${data}\">${data}</a>`\n        }\n      },\n      {\n        data: 'WEBSITE',\n        title: 'WEBSITE',\n        render: function(data, type, full, meta) {\n          return `<a href=\"${data}\" target=\"_blank\">${data}</a>`\n        }\n      }\n    ]\n  })\n}\n","import * as Data from './data.js'\nimport * as Map from './map.js'\nimport style from './style/main.scss'\n\nconst app = document.querySelector('#app')\n\napp.innerHTML = `\n<div id=\"spinner\">\n  <div class=\"spinner-grow text-secondary\" role=\"status\">\n    <span class=\"sr-only\">Loading...</span>\n  </div>\n</div>\n<div id=\"map\"></div>\n<div id=\"mapLegend\"></div>\n<div class=\"table-wrapper\">\n  <table id=\"table\" class=\"stripe display responsive\" width=\"100%\"></table>\n</div>\n`\n\nwindow.addEventListener('DOMContentLoaded', init)\n\nfunction init() {\n  Data.getSpreadsheetData()\n\n  const mapLegend = document.querySelector('#mapLegend')\n  mapLegend.innerHTML = Map.mapLegend(Map.roleColors)\n}\n"],"sourceRoot":""}