{"version":3,"sources":["webpack:///./src/map.js","webpack:///./src/index.js"],"names":["INITIAL_COORDS","roleColors","buildFeature","feature","featureObject","variable","hasOwnProperty","properties","geometry","coordinates","push","parseFloat","parseDMS","input","parts","split","degrees","minutes","seconds","direction","dd","parseInt","convertDMSToDD","document","querySelector","innerHTML","window","addEventListener","Papa","download","header","complete","results","data","geoJSON","featureCollection","i","length","replace","lon","lat","match","isNaN","built","e","console","log","buildGeoJSON","features","map","L","setView","maxZoom","attribution","id","addTo","pointToLayer","latlng","radius","fillColor","color","weight","opacity","fillOpacity","onEachFeature","layer","prop","generateLine","propKey","popupContent","linkText","generateLink","bindPopup","loadMap","setTimeout","getElementById","style","display","colors","colorsHTML","join","Map"],"mappings":"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","file":"app.a8fd20e8.js","sourcesContent":["import * as Papa from 'papaparse'\nimport * as L from 'leaflet'\n\nconst publicSpreadsheetUrl = 'https://docs.google.com/spreadsheets/d/19ss6dmhb2B9qFWZQVODeYFJzMBCvyd5fPy8bjkA3CB8/pub?gid=1619676924&output=csv'\nconst MAPBOX_LINK = 'https://api.mapbox.com/styles/v1/bernardosp/ck3r9ne5k21bj1dpdgl67vzyu/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiYmVybmFyZG9zcCIsImEiOiJjamkyMmhqdjAwZ284M2txcHpqYjUwam91In0.RiploEl5Mm6bjXhPZbN6XQ'\nconst LAT_COL = 'LAT'\nconst LON_COL = 'LON'\nconst INITIAL_COORDS = [37.76496739271615, -122.39985495803376]\nconst INITIAL_ZOOM = 8\n\nconst roleColors = {\n  'Architectural / Consulting Firm': '#ff7f0e',\n  'Deconstruction': '#2ca02c',\n  'Government / Public Agency': '#aec7e8',\n  'Reuse': '#9467bd',\n  'Waste Management & Recycling': '#bcbd22',\n}\n\nexport {\n  init,\n  roleColors,\n  mapLegend,\n}\n\nfunction init() {\n  Papa.parse(publicSpreadsheetUrl, {\n  download: true,\n  header: true,\n  complete: function(results) {\n      const data = results.data\n      const geoJSON = buildGeoJSON(data)\n      console.log(data)\n      console.log(geoJSON)\n      console.log(data.length, 'rows received')\n      console.log(geoJSON.features.length, 'rows parsed')\n      loadMap(geoJSON)\n      setTimeout(function(){\n        document.getElementById('spinner').style.display = 'none'\n      }, 350)\n    }\n  })\n}\n\nfunction buildFeature(feature) {\n  let featureObject = {\n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": []\n    }\n  }\n  for (let variable in feature) {\n    if (feature.hasOwnProperty(variable)) {\n      featureObject.properties[variable] = feature[variable]\n    }\n  }\n  featureObject.geometry.coordinates.push(parseFloat(feature[LON_COL]))\n  featureObject.geometry.coordinates.push(parseFloat(feature[LAT_COL]))\n  return featureObject\n}\n\nfunction buildGeoJSON(data) {\n  let featureCollection = {\n    \"type\": \"FeatureCollection\",\n    \"features\": []\n  }\n  for (var i = 0; i < data.length; i++) {\n    let feature = data[i]\n    feature[LON_COL] = feature[LON_COL].replace(',', '.')\n    feature[LAT_COL] = feature[LAT_COL].replace(',', '.')\n    let lon = feature[LON_COL]\n    let lat = feature[LAT_COL]\n    if (lon.match(/[a-z]/i) && lat.match(/[a-z]/i)) {\n      feature[LON_COL] = parseDMS(feature[LON_COL])\n      feature[LAT_COL] = parseDMS(feature[LAT_COL])\n    }\n    try {\n      if (isNaN(parseFloat(lon)) == false && isNaN(parseFloat(lat)) == false) {\n        let built = buildFeature(feature)\n        featureCollection['features'].push(built)\n      }\n    } catch (e) {\n        console.log('error parsing row', i, e)\n    }\n  }\n  return featureCollection\n}\n\nfunction loadMap(geoJSON) {\n  const map = L.map('map').setView(INITIAL_COORDS, INITIAL_ZOOM)\n\n  L.tileLayer(MAPBOX_LINK, {\n    maxZoom: 18,\n    attribution: 'Map data &copy <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n      'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    id: 'mapbox.light'\n  }).addTo(map)\n\n  function popup(feature, layer) {\n    let prop = feature.properties\n    let entityName = 'ENTITY'\n    let address = 'FULL ADDRESS'\n    let locationName = 'LOCATION NAME'\n    let generalRole = 'GENERAL ROLE'\n    let role = 'ROLE(S)'\n    let link = 'WEBSITE'\n    let contact = 'CONTACT'\n    let email = 'EMAIL'\n    let phone = 'PHONE'\n\n    function generateLine(prop, propKey) {\n      return (prop[propKey] ? `<tr><td><strong>${propKey}</strong></td><td>${prop[propKey]}</td></tr>` : '')\n    }\n    function generateLink(prop, propKey, linkText) {\n      return (prop[propKey] ? `<tr><td colspan=\"2\"><strong><a href=\"${prop[propKey]}\" target=\"_blank\">${linkText}</a></strong></td></tr>` : '')\n    }\n\n    let popupContent = `\n      ${generateLine(prop, 'ENTITY')}\n      ${generateLine(prop, 'GENERAL ROLE')}\n      ${generateLine(prop, 'ROLE(S)')}\n      ${generateLine(prop, 'LOCATION NAME')}\n      ${generateLine(prop, 'FULL ADDRESS')}\n      ${generateLine(prop, 'CONTACT')}\n      ${generateLine(prop, 'EMAIL')}\n      ${generateLine(prop, 'PHONE')}\n      ${generateLink(prop, link, 'WEBSITE')}\n    `\n\n    layer.bindPopup(`\n      <table class=\"table table-sm\">\n        <tbody>\n          ${popupContent}\n        </tbody>\n      </table>`)\n  }\n\n  const pointsLayers = L.geoJSON(geoJSON, {\n    pointToLayer: function(feature, latlng) {\n      console.log(feature);\n      return L.circleMarker(latlng, {\n        radius: 9,\n        fillColor: roleColors[feature.properties['GENERAL ROLE']],\n        color: \"#fff\",\n        weight: 1,\n        opacity: 1,\n        fillOpacity: 0.9,\n      })\n    },\n    onEachFeature: popup\n  }).addTo(map)\n\n}\n\n// https://stackoverflow.com/questions/1140189/converting-latitude-and-longitude-to-decimal-values\nfunction parseDMS(input) {\n    let parts = input.split(/[^\\d\\w\\.]+/)\n    return convertDMSToDD(parts[0], parts[1], parts[2], parts[3])\n}\n\nfunction convertDMSToDD(degrees, minutes, seconds, direction) {\n    let dd = parseInt(degrees) + parseInt(minutes)/60 + parseInt(seconds)/(60*60)\n\n    if (direction == \"S\" || direction == \"W\") {\n        dd = dd * -1\n    }\n    return dd\n}\n\nfunction mapLegend(colors) {\n  const colorsHTML = []\n  for (let variable in colors) {\n    if (colors.hasOwnProperty(variable)) {\n      colorsHTML.push(`\n        <div class=\"map-legend-row flex\">\n          <div class=\"map-legend-color\" style=\"background: ${colors[variable]}\"></div>\n          <span>${variable}</span>\n        </div>\n      `)\n    }\n  }\n  return `<div class=\"map-legend flex flex-column\">${colorsHTML.join('\\n')}</div>`\n}\n","import * as Map from './map.js'\nimport style from './style/main.scss'\n\nconst app = document.querySelector('#app')\n\napp.innerHTML = `\n<div id=\"spinner\">\n  <div class=\"spinner-grow text-secondary\" role=\"status\">\n    <span class=\"sr-only\">Loading...</span>\n  </div>\n</div>\n<div id='map'></div>\n<div id='mapLegend'></div>\n`\n\nwindow.addEventListener('DOMContentLoaded', Map.init)\n\nconst mapLegend = document.querySelector('#mapLegend')\nmapLegend.innerHTML = Map.mapLegend(Map.roleColors)\n"],"sourceRoot":""}